//-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -

  float[][] TRI = {
/* TRI[0][X] point A */      {1, 1, 2, 2, 2, 4, 4, 5, 5, 5, 6, 7, 3, 3, 3, 11, 12, 15, 15, 16, 16, 16, 17, 18, 6, 6, 8, 10, 11, 11, 13, 13, 14, 14, 19, 19, 20, 21, 21, 22, 22, 9, 9, 9, 9, 23, 23, 23, 25,
19, 30, 31, 32, 32, 28, 28, 28, 27, 27, 27, 27, 26, 29, 30, 31, 29, 54, 54, 55, 55, 56, 57, 58, 58, 89, 59, 59, 62, 62, 62, 66, 63, 64, 64, 29, 35, 35, 34, 33, 37, 38, 38, 39, 41, 45, 42, 42, 40, 45, 43,
44, 44, 44, 49, 47, 50, 47, 88, 88, 124, 124, 89, 89, 48, 53, 105, 105, 109, 109, 130, 135, 135, 134, 129, 125, 125, 126, 126, 126, 126, 94, 99, 99, 102, 102, 103, 104, 146, 146, 148, 104, 98, 66, 67, 149,
150, 65, 69, 70, 70, 73, 70, 73, 69, 75, 67, 68, 75, 75, 77, 67, 78, 67, 48, 139, 37, 53, 76, 78, 78, 67, 79, 80, 79, 81, 79, 82, 85, 85, 48, 136, 136, 136, 137, 138, 138, 138, 139, 129, 140, 139, 139, 
140, 141, 142, 143, 143, 144, 144, 145, 141, 153, 153, 154, 152, 157, 156, 156, 160, 160, 160, 158, 158, 158, 161, 161, 155, 147, 159, 159, 148, 186, 156, 151, 151, 151, 150, 87, 162, 162, 163, 163, 164,
164, 164, 165, 165, 165, 166, 167, 181, 181, 181, 180, 182, 108, 108, 180, 178, 180, 183, 183, 185, 195, 196, 196, 185, 185, 185, 187, 188, 213, 187, 186, 186, 168, 167, 169, 34, 187, 197, 189, 170, 170, 
190, 171, 171, 171, 208, 191, 209, 172, 173, 174, 175, 176, 176, 177, 178, 179, 192, 178, 194, 194, 194, 200, 201, 198, 200, 202, 204, 200, 199, 204, 199, 199, 206, 208, 207, 207, 209, 209, 211, 105, 105,
106, 107, 110, 110, 107, 111, 111, 111, 109, 114, 123, 112, 113, 113, 90, 95, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 90, 94, 95, 95, 91, 91, 92, 96, 97,
100, 100, 100, 108, 108, 108, 108, 108, 108, 108, 108, 108, 97, 97, 92, 56, 59, 60, 93, 36, 39, 88, 130, 126, 126}


,
/* TRI[1][X] point B */      {3, 2, 5, 6, 3, 3, 11, 15, 16, 17, 7, 8, 8, 9, 10, 12, 13, 19, 16, 20, 18, 17, 18, 21, 17, 22, 22, 9, 9, 13, 23, 14, 24, 25, 30, 20, 21, 31, 22, 32, 9, 57, 58, 28, 23, 28, 24,
25, 27, 29, 31, 32, 55, 56, 59, 60, 61, 61, 62, 63, 26, 64, 30, 53, 54, 53, 53, 55, 106, 56, 88, 58, 88, 59, 59, 91, 62, 92, 92, 63, 93, 66, 66, 65, 36, 36, 40, 37, 37, 38, 39, 41, 40, 42, 47, 45, 43, 47,
47, 46, 47, 47, 49, 50, 50, 51, 48, 123, 124, 125, 89, 125, 126, 136, 105, 136, 137, 137, 139, 134, 129, 129, 125, 125, 141, 126, 142, 143, 145, 94, 99, 146, 101, 101, 103, 104, 148, 145, 147, 149, 98, 66,
67, 149, 150, 67, 67, 70, 71, 72, 72, 73, 74, 70, 74, 69, 73, 77, 77, 76, 68, 77, 87, 52, 152, 39, 106, 78, 79, 80, 86, 80, 81, 85, 82, 85, 83, 82, 84, 136, 162, 138, 137, 138, 163, 164, 139, 129, 140, 139,
156, 165, 141, 142, 143, 153, 144, 154, 145, 155, 153, 152, 154, 155, 156, 158, 158, 160, 166, 167, 161, 160, 161, 159, 168, 159, 147, 148, 169, 148, 170, 183, 157, 170, 171, 150, 172, 172, 163, 174, 175,
164, 176, 178, 165, 180, 181, 166, 181, 181, 183, 180, 182, 182, 184, 108, 108, 178, 195, 184, 184, 195, 195, 196, 198, 197, 196, 188, 187, 188, 197, 189, 189, 185, 169, 186, 168, 170, 37, 170, 189, 199,
189, 171, 171, 199, 191, 172, 191, 172, 172, 173, 212, 175, 176, 177, 179, 193, 179, 194, 193, 194, 193, 198, 200, 201, 202, 199, 202, 204, 203, 204, 200, 205, 206, 208, 207, 209, 205, 209, 210, 212, 212,
106, 109, 107, 110, 111, 109, 123, 123, 112, 113, 114, 113, 124, 113, 134, 130, 91, 99, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 94, 95, 100, 96, 95, 92,
96, 97, 100, 104, 101, 102, 108, 108, 108, 108, 108, 108, 108, 108, 108, 98, 93, 97, 57, 60, 61, 66, 40, 42, 107, 135, 144, 90}


,
/* TRI[2][X] point C */      {4, 3, 6, 7, 7, 11, 12, 16, 17, 6, 8, 3, 9, 10, 11, 13, 14, 20, 20, 21, 21, 18, 22, 22, 22, 8, 9, 11, 23, 23, 24, 24, 25, 26, 31, 31, 31, 32, 32, 57, 57, 58, 59, 59, 28, 27, 25,
27, 26, 31, 54, 55, 56, 57, 60, 61, 27, 62, 63, 64, 64, 65, 53, 54, 55, 48, 106, 106, 107, 107, 107, 88, 89, 89, 90, 90, 91, 91, 93, 93, 63, 64, 67, 67, 48, 40, 34, 33, 38, 39, 42, 42, 45, 43, 40, 46, 46,
48, 46, 44, 46, 50, 50, 51, 52, 52, 52, 124, 89, 134, 125, 126, 90, 53, 136, 137, 109, 139, 130, 135, 139, 134, 129, 141, 142, 142, 143, 144, 146, 146, 146, 148, 148, 148, 148, 148, 149, 147, 148, 151,
149, 149, 149, 150, 151, 87, 69, 71, 72, 73, 74, 68, 75, 68, 76, 68, 79, 76, 79, 78, 79, 79, 86, 162, 156, 40, 105, 81, 80, 81, 79, 82, 82, 82, 83, 86, 84, 84, 86, 162, 163, 163, 138, 139, 164, 165, 165,
140, 141, 152, 166, 166, 152, 153, 153, 154, 154, 155, 155, 147, 152, 157, 157, 157, 157, 155, 160, 166, 167, 168, 168, 161, 159, 155, 169, 169, 159, 159, 170, 170, 151, 185, 158, 171, 172, 172, 87, 173,
175, 175, 176, 176, 179, 179, 178, 178, 180, 181, 167, 186, 186, 182, 183, 184, 183, 108, 108, 195, 198, 195, 195, 185, 196, 198, 199, 199, 197, 197, 188, 213, 213, 197, 213, 187, 187, 169, 186, 187, 40,
189, 199, 190, 190, 190, 199, 208, 208, 191, 209, 209, 212, 212, 0, 177, 177, 193, 193, 192, 194, 193, 201, 198, 201, 200, 201, 202, 203, 200, 204, 203, 205, 206, 206, 206, 207, 207, 205, 207, 210, 210,
211, 211, 0, 110, 110, 110, 111, 114, 114, 111, 112, 113, 114, 130, 130, 112, 124, 124, 134, 95, 101, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 95, 99, 101,
100, 96, 96, 97, 100, 104, 103, 102, 103, 108, 108, 108, 108, 108, 108, 108, 108, 108, 104, 98, 93, 88, 62, 62, 98, 48, 45, 123, 139, 145, 94}


,
/* TRI[3][X] saturation */   {37, 37, 27, 27, 22, 54, 54, 27, 27, 22, 27, 27, 27, 27, 37, 100, 100, 27, 27, 22, 27, 27, 27, 22, 27, 22, 27, 27, 37, 54, 54, 100, 100, 99, 22, 27, 27, 22, 22, 27, 27, 37, 54,
54, 54, 54, 54, 100, 99, 27, 22, 27, 22, 37, 54, 100, 100, 100, 100, 100, 99, 99, 27, 37, 27, 27, 35, 22, 27, 22, 37, 54, 54, 54, 78, 71, 78, 71, 98, 100, 100, 100, 99, 99, 27, 30, 30, 30, 31, 34, 35, 20, 
31, 20, 19, 38, 38, 27, 38, 38, 38, 38, 38, 36, 38, 36, 38, 54, 50, 19, 19, 85, 85, 35, 19, 19, 19, 19, 47, 54, 36, 49, 19, 30, 35, 85, 52, 65, 100, 95, 78, 88, 78, 78, 98, 98, 100, 100, 89, 100, 100, 100,
100, 100, 100, 99, 95, 95, 86, 86, 86, 95, 86, 95, 86, 95, 100, 89, 100, 86, 95, 86, 99, 38, 35, 31, 35, 100, 95, 100, 99, 100, 100, 100, 67, 100, 67, 67, 67, 35, 35, 38, 19, 27, 37, 27, 21, 19, 35, 35,
35, 21, 35, 18, 52, 54, 65, 98, 100, 100, 35, 52, 54, 65, 52, 65, 25, 25, 33, 54, 54, 54, 65, 98, 54, 65, 100, 85, 88, 89, 100, 54, 25, 100, 100, 100, 99, 99, 35, 35, 35, 35, 35, 38, 33, 39, 39, 33, 39,
39, 39, 39, 39, 21, 21, 108, 108, 27, 39, 21, 21, 46, 46, 46, 53, 53, 53, 53, 53, 53, 53, 88, 88, 73, 73, 54, 54, 73, 30, 73, 53, 88, 73, 86, 88, 100, 100, 100, 100, 100, 99, 99, 67, 35, 35, 38, 38, 38, 39,
39, 39, 39, 39, 53, 46, 46, 53, 53, 53, 88, 88, 53, 53, 100, 100, 100, 100, 100, 99, 99, 99, 99, 67, 57, 35, 35, 35, 57, 57, 57, 65, 100, 65, 54, 100, 100, 100, 100, 100, 57, 74, 108, 108, 108, 108, 108,
108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 57, 74, 57, 74, 100, 100, 100, 74, 100, 100, 100, 100, 108, 108, 108, 108, 108, 108, 108, 108, 108, 100, 71, 71, 37, 78, 100, 100, 27, 25,
54, 47, 100, 95}


,
/* TRI[4][X] brightness */   {61, 61, 93, 93, 100, 38, 38, 93, 93, 100, 93, 93, 93, 93, 61, 22, 22, 93, 93, 100, 93, 93, 93, 100, 93, 100, 93, 93, 61, 38, 38, 22, 22, 31, 100, 93, 93, 100, 100, 93, 93, 61,
38, 38, 38, 38, 38, 22, 31, 93, 100, 93, 100, 61, 38, 22, 22, 22, 22, 22, 31, 31, 93, 61, 63, 93, 69, 100, 93, 100, 61, 38, 38, 38, 31, 38, 31, 38, 23, 22, 22, 22, 31, 31, 93, 46, 46, 46, 81, 67, 67, 100,
73, 100, 100, 58, 58, 93, 58, 58, 58, 58, 58, 40, 58, 40, 58, 38, 50, 100, 100, 24, 24, 69, 100, 100, 100, 100, 43, 35, 87, 54, 100, 99, 89, 24, 47, 25, 16, 22, 32, 26, 32, 32, 32, 23, 22, 16, 18, 22, 22,
22, 22, 22, 22, 31, 32, 32, 35, 35, 35, 32, 35, 32, 35, 32, 22, 35, 22, 35, 32, 35, 31, 58, 89, 74, 69, 22, 32, 22, 31, 22, 22, 22, 22, 22, 22, 22, 22, 49, 49, 62, 100, 93, 59, 93, 99, 100, 89, 89, 89, 99,
89, 98, 47, 33, 25, 16, 16, 16, 89, 47, 33, 25, 47, 25, 100, 100, 92, 33, 33, 33, 25, 16, 33, 25, 16, 18, 13, 18, 22, 33, 100, 22, 22, 22, 31, 31, 49, 49, 49, 49, 49, 62, 81, 45, 45, 92, 92, 45, 45, 45,
45, 100, 100, 108, 108, 93, 45, 100, 100, 36, 36, 36, 23, 23, 23, 23, 23, 23, 23, 13, 13, 18, 18, 33, 33, 18, 46, 18, 23, 13, 18, 13, 13, 18, 22, 22, 22, 22, 31, 31, 22, 49, 49, 62, 62, 62, 45, 45, 45, 45,
45, 23, 36, 36, 23, 23, 23, 13, 13, 23, 23, 18, 18, 18, 22, 22, 31, 31, 31, 31, 22, 46, 69, 69, 69, 46, 46, 46, 25, 24, 25, 38, 24, 24, 24, 24, 24, 46, 40, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108,
108, 108, 108, 108, 108, 108, 108, 108, 46, 40, 46, 40, 24, 22, 24, 40, 24, 24, 24, 24, 108, 108, 108, 108, 108, 108, 108, 108, 108, 24, 38, 38, 61, 31, 22, 22, 93, 67, 38, 43, 16, 22}


  };
  
  float[][] PT ={
/* R = 0   X */              {733, 470, 375, 491, 551, 272, 340, 403, 418, 487, 521, 588, 652, 645, 732, 201, 257, 316, 283, 127, 176, 243, 378, 621, 675, 759, 806, 716, 587, 100, 130, 195, 285, 45, 57, 64,
93, 62, 47, 64, 92, 50, 77, 62, 69, 90, 91, 105, 111, 87, 104, 111, 130, 134, 187, 214, 266, 366, 465, 569, 636, 665, 672, 729, 793, 819, 762, 805, 819, 825, 846, 856, 879, 863, 875, 858, 867, 847, 839,
817, 830, 849, 828, 832, 810, 806, 790, 779, 352, 454, 561, 605, 649, 701, 571, 601, 629, 654, 708, 600, 643, 622, 641, 678, 693, 196, 224, 268, -1000, 257, 245, 278, 320, 322, 279, -500, -500, -500, -500,
-500, -500, -500, -500, 315, 374, 445, 481, -500, -500, 370, 299, -500, -500, -500, 370, 342, 156, 185, 190, 321, 359, 371, 430, 463, 494, 544, 573, 576, 657, 754, 780, 706, 369, 445, 474, 547, 378, 457,
462, 534, 435, 491, 140, 194, 243, 294, 376, 409, 460, 503, 578, 641, 719, 747, 204, 218, 230, 236, 285, 282, 343, 360, 374, 422, 397, 456, 458, 512, 497, 569, 597, 666, 304, 328, 349, 395, 460, 515, 412,
528, 495, 367, 456, 454, 541, 596, 560, 620, 618, 679, 637, 681, 716, 513}


,
/* R = 1   Y */              {908, 32, 43, 54, 38, 66, 82, 80, 121, 169, 89, 70, 73, 102, 125, 112, 108, 108, 127, 204, 182, 186, 188, 164, 158, 209, 245, 247, 229, 296, 272, 227, 226, 440, 424, 413, 462,
471, 490, 493, 501, 536, 550, 601, 662, 582, 621, 635, 582, 703, 679, 707, 727, 420, 357, 345, 330, 294, 284, 339, 306, 301, 342, 362, 284, 347, 449, 543, 514, 463, 438, 417, 428, 448, 468, 477, 516, 525,
567, 629, 637, 658, 693, 707, 709, 697, 740, 766, 349, 418, 454, 427, 410, 426, 474, 435, 424, 423, 459, 482, 461, 486, 488, 477, 465, 465, 420, 413, -500, 484, 447, 431, 443, 470, 475, 0, 0, 0, 0, 0, 0,
0, 0, 413, 454, 464, 456, 0, 0, 534, 494, 0, 0, 0, 477, 511, 583, 565, 656, 709, 644, 653, 626, 631, 625, 648, 570, 673, 645, 567, 620, 710, 677, 660, 659, 681, 714, 690, 703, 716, 739, 723, 784, 821, 860,
842, 795, 807, 797, 798, 822, 870, 840, 863, 920, 925, 915, 952, 902, 928, 850, 827, 844, 840, 851, 842, 820, 841, 849, 855, 863, 893, 1009, 975, 936, 880, 883, 873, 918, 917, 941, 1045, 1036, 1068, 1024,
1036, 982, 995, 918, 923, 1001, 970, 905, 852}


,
/* R = 2   Z */              {5, 13, 13, 12, 13, 13, 11, 12, 11, 8, 11, 11, 13, 11, 13, 13, 11, 11, 11, 13, 11, 8, 8, 8, 8, 11, 13, 6, 6, 13, 11, 6, 6, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
13, 13, 11, 13, 13, 13, 7, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 11, 13, 9, 11, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 13, 13, 13, 13, 13, 13, 7, 7, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
5, 5, 5, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 3, 3, 0, 0, 4, 5, 0, 0, 0, 4, 5, 7, 7, 9, 4, 3, 1, 1, 0, 0, 1, 4, 3, 7, 9, 9, 7, 1, 0, 0, 1, 2, 0, 0, 2, 2, 2, 7, 5, 1, 1, 1, 1, 1, 1, 2, 4, 4,
5, 5, 5, 4, 3, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 3, 2, 3, 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3, 2, 4, 4, 4, 3, 3, 5, 1}


  };
  
  PrintWriter resulter;
  
  void setup()
  {
    //println(TRI[0].length);
    resulter = createWriter("data/arrays.txt");
    float[][] triangle = new float [5][0];
    float[][] points = new float [3][0];
    for (int i = 0; i < TRI[0].length; i++)
    {
      float[][] temp_point = new float [3][points[0].length+3];
      for(int j = 0; j < points[0].length; j++)
      {
        temp_point[0][j] = points[0][j];
        temp_point[1][j] = points[1][j];
        temp_point[2][j] = points[2][j];
      }
      temp_point[0][temp_point[0].length-3] = map(PT[0][(int)TRI[0][i]]+100,0,1536,0,1920);
      temp_point[1][temp_point[0].length-3] = map(PT[1][(int)TRI[0][i]],0,864,0,1080);
      temp_point[2][temp_point[0].length-3] = PT[2][(int)TRI[0][i]];
      
      temp_point[0][temp_point[0].length-2] = map(PT[0][(int)TRI[1][i]]+100,0,1536,0,1920);
      temp_point[1][temp_point[0].length-2] = map(PT[1][(int)TRI[1][i]],0,864,0,1080);
      temp_point[2][temp_point[0].length-2] = PT[2][(int)TRI[1][i]];
      
      temp_point[0][temp_point[0].length-1] = map(PT[0][(int)TRI[2][i]]+100,0,1536,0,1920);
      temp_point[1][temp_point[0].length-1] = map(PT[1][(int)TRI[2][i]],0,864,0,1080);
      temp_point[2][temp_point[0].length-1] = PT[2][(int)TRI[2][i]];
      if(PT[0][(int)TRI[0][i]] == 643 && PT[1][(int)TRI[0][i]] == 461 && PT[2][(int)TRI[0][i]] == 5)
      println(temp_point[0].length-3);
      if(PT[0][(int)TRI[1][i]] == 643 && PT[1][(int)TRI[1][i]] == 461 && PT[2][(int)TRI[1][i]] == 5)
      println(temp_point[0].length-2);
      if(PT[0][(int)TRI[2][i]] == 643 && PT[1][(int)TRI[2][i]] == 461 && PT[2][(int)TRI[2][i]] == 5)
      println(temp_point[0].length-1);
      
      float[][] temp_tri = new float [5][triangle[0].length+1];
      for(int j = 0; j < triangle[0].length; j++)
      {
        temp_tri[0][j] = triangle[0][j];
        temp_tri[1][j] = triangle[1][j];
        temp_tri[2][j] = triangle[2][j];
        temp_tri[3][j] = triangle[3][j];
        temp_tri[4][j] = triangle[4][j];
      }
      temp_tri[0][temp_tri[0].length-1] = temp_point[0].length-3;
      temp_tri[1][temp_tri[0].length-1] = temp_point[0].length-2;
      temp_tri[2][temp_tri[0].length-1] = temp_point[0].length-1;
      temp_tri[3][temp_tri[0].length-1] = TRI[3][i];
      temp_tri[4][temp_tri[0].length-1] = TRI[4][i];
      points = temp_point;
      triangle = temp_tri;
      
    //println(temp_tri[0].length);
    }
    
    
    //begin writing to file
    
    
    resulter.print("float[][] TRI = {\n/* TRI[0][X] point A */      {");
    //println(triangle[0].length);
    //println(points[0].length);
    for(int i = 0; i < triangle[0].length; i++)
    {
      if ( i == triangle[0].length-1)
      {
        resulter.print((int)triangle[0][i] + "},");
      }
      else
      {
        resulter.print((int)triangle[0][i] + ", ");
      }
    }
    resulter.print("\n\n/* TRI[1][X] point B */      {");
    for(int i = 0; i < triangle[0].length; i++)
    {
      if ( i == triangle[0].length-1)
      {
        resulter.print((int)triangle[1][i] + "},");
      }
      else
      {
        resulter.print((int)triangle[1][i] + ", ");
      }
    }
    resulter.print("\n\n/* TRI[2][X] point C */      {");
    for(int i = 0; i < triangle[0].length; i++)
    {
      if ( i == triangle[0].length-1)
      {
        resulter.print((int)triangle[2][i] + "},");
      }
      else
      {
        resulter.print((int)triangle[2][i] + ", ");
      }
    }
    resulter.print("\n\n/* TRI[3][X] Saturation */      {");
    for(int i = 0; i < triangle[0].length; i++)
    {
      if ( i == triangle[0].length-1)
      {
        resulter.print((int)triangle[3][i] + "},");
      }
      else
      {
        resulter.print((int)triangle[3][i] + ", ");
      }
    }
    resulter.print("\n\n/* TRI[4][X] Brightness */      {");
    for(int i = 0; i < triangle[0].length; i++)
    {
      if ( i == triangle[0].length-1)
      {
        resulter.print((int)triangle[4][i] + "}");
      }
      else
      {
        resulter.print((int)triangle[4][i] + ", ");
      }
    }
    resulter.print("\n\n};\n\nfloat[][] PT ={\n/* R = 0   X */              {");
    for(int i = 0; i < points[0].length; i++)
    {
      if ( i == points[0].length-1)
      {
        resulter.print((int)points[0][i] + "},");
      }
      else
      {
        resulter.print((int)points[0][i] + ", ");
      }
    }
    resulter.print("\n\n/* R = 1   X */              {");
    for(int i = 0; i < points[0].length; i++)
    {
      if ( i == points[0].length-1)
      {
        resulter.print((int)points[1][i] + "},");
      }
      else
      {
        resulter.print((int)points[1][i] + ", ");
      }
    }
    resulter.print("\n\n/* R = 2   X */              {");
    for(int i = 0; i < points[0].length; i++)
    {
      if ( i == points[0].length-1)
      {
        resulter.print((int)points[2][i] + "}");
      }
      else
      {
        resulter.print((int)points[2][i] + ", ");
      }
    }
    resulter.print("\n\n};");
    //println(points.length*points[0].length + triangle.length*triangle[0].length);
    resulter.flush();
    resulter.close();
    exit();
  }
